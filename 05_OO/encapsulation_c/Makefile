CC = gcc

CFLAGS = -O2 -Wall

LDFLAGS = -lm

TARGET = main

OBJS = main.o point.o

all: $(TARGET)

$(TARGET): $(OBJS)
	$(CC) -o $@ $^ $(LDFLAGS)

%.o: %.c
	$(CC) $(CFLAGS) -c $<

clean:
	rm -f $(OBJS) $(TARGET)

.PHONY: all clean

# 説明です：

# 1. `CC = gcc`  
# この行はコンパイラとして`gcc`を使うことを指定しています。`CC`はコンパイラを表す変数名です。

# 2. `CFLAGS = -O2 -Wall`  
# この行はコンパイル時のオプションを指定しています。`-O2`は最適化レベル2でコンパイルすることを示し、`-Wall`は警告を可能な限りすべて有効にすることを示しています。

# 3. `LDFLAGS = -lm`  
# この行はリンク時のオプションを指定しています。特に、`-lm`は数学関数を使うためのライブラリ(`libm`)とリンクすることを示しています。

# 4. `TARGET = main`  
# 出力される実行ファイルの名前を`main`として指定しています。

# 5. `OBJS = main.o point.o`  
# リンクに必要なオブジェクトファイルのリストを定義しています。

# 6. `all: $(TARGET)`  
# デフォルトターゲットを指定しています。`make`を単体で実行するとこのターゲットが実行されます。この場合、`$(TARGET)`（すなわち`main`）が作成されるようになっています。

# 7. `$(TARGET): $(OBJS)`  
# `main`（TARGETの値）が`main.o`と`point.o`（OBJSの値）に依存していることを示しています。

# 8. `$(CC) -o $@ $^ $(LDFLAGS)`  
# ターゲットをビルドするためのコマンドを示しています。`$@`はターゲット名（この場合`main`）、`$^`は依存する全てのファイル名（この場合`main.o`と`point.o`）、`$(LDFLAGS)`はリンクのフラグ（この場合`-lm`）を表しています。

# 9. `%.o: %.c`  
# .cファイルから.oファイルを生成するためのパターンルールを示しています。

# 10. `$(CC) $(CFLAGS) -c $<`  
# オブジェクトファイルをビルドするためのコマンドを示しています。`$<`は依存するファイル名（この場合、一致する.cファイル）を表しています。

# 11. `clean:`  
# 不要なファイルを削除するためのターゲットを定義しています。

# 12. `rm -f $(OBJS) $(TARGET)`  
# `clean`ターゲットで実行されるコマンドを示しています。`$(OBJS)`と`$(TARGET)`に一致するファイルを削除します。

# 13. `.PHONY: all clean`  
# `all`と`clean`を疑似ターゲットとして指定しています。これにより、allやcleanという名前のファイルがディレクトリに存在しても、それに関連するルールが実行されるようになります。